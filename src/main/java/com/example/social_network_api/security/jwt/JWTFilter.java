package com.example.social_network_api.security.jwt;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Lazy;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component
public class JWTFilter extends OncePerRequestFilter {

    private final JWTUtils jwtUtils; // Class ti·ªán √≠ch ƒë·ªÉ x·ª≠ l√Ω JWT (t·∫°o, parse, validate)
    private final UserDetailsService userDetailsService; // ƒê·ªÉ load th√¥ng tin user t·ª´ DB

    // @Lazy gi√∫p tr√°nh v√≤ng l·∫∑p ph·ª• thu·ªôc (bean cycle)
    public JWTFilter(JWTUtils jwtUtils, @Lazy UserDetailsService userDetailsService) {
        this.jwtUtils = jwtUtils;
        this.userDetailsService = userDetailsService;
    }

    // doFilterInternal: ch·∫°y cho M·ªñI request (ngo·∫°i tr·ª´ nh·ªØng request b·ªã b·ªè qua trong SecurityConfig)
    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain) throws ServletException, IOException {

        String username = null;
        String token = null;

        // 1Ô∏è‚É£ L·∫•y token t·ª´ Header "Authorization"
        final String authHeader = request.getHeader("Authorization");
        // 2Ô∏è‚É£ N·∫øu header c√≥ d·∫°ng "Bearer abc.def.ghi" ‚Üí c·∫Øt l·∫•y token
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            token = authHeader.substring(7); // B·ªè ch·ªØ "Bearer "
            try {
                // 3Ô∏è‚É£ D√πng JWTUtils ƒë·ªÉ tr√≠ch xu·∫•t username t·ª´ token
                username = jwtUtils.extractUsername(token);
            } catch (Exception e) {
                throw new UsernameNotFoundException("Invalid token");
            }
        }
        // 5Ô∏è‚É£ Ki·ªÉm tra:
        // - C√≥ username t·ª´ token
        // - SecurityContext ch∆∞a c√≥ Authentication (nghƒ©a l√† user ch∆∞a ƒëƒÉng nh·∫≠p)
        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            // 6Ô∏è‚É£ Load UserDetails t·ª´ DB
            UserDetails userDetails = this.userDetailsService.loadUserByUsername(username);

            // 7Ô∏è‚É£ Ki·ªÉm tra token c√≥ h·ª£p l·ªá v·ªõi userDetails hay kh√¥ng
            if (jwtUtils.isTokenValid(token, userDetails)) {
                // 8Ô∏è‚É£ T·∫°o ƒë·ªëi t∆∞·ª£ng Authentication ƒë·ªÉ Spring Security bi·∫øt user ƒë√£ x√°c th·ª±c
                UsernamePasswordAuthenticationToken authToken =
                        new UsernamePasswordAuthenticationToken(
                                userDetails,       // Principal
                                null,              // Credentials (ƒë·ªÉ null v√¨ kh√¥ng d√πng l·∫°i password)
                                userDetails.getAuthorities() // Roles/Authorities
                        );

                // 9Ô∏è‚É£ G·∫Øn th√¥ng tin request v√†o Authentication
                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

                // üîü ƒê∆∞a Authentication v√†o SecurityContext ‚Üí Spring bi·∫øt request n√†y ƒë√£ x√°c th·ª±c
                SecurityContextHolder.getContext().setAuthentication(authToken);
            }
        }

        // 1Ô∏è‚É£1Ô∏è‚É£ Cho request ƒëi ti·∫øp qua c√°c filter ti·∫øp theo
        filterChain.doFilter(request, response);
    }
}

